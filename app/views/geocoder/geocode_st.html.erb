<h1>GÃ©ocoder StationHeader</h1>
<div id="mapid"></div>
<script>
  L.Icon.Default.imagePath = '/assets/';
  L.Icon.Default.mergeOptions({
      iconRetinaUrl: 'images/marker-icon-2x.png',
      iconUrl: 'images/marker-icon.png',
      shadowUrl: 'images/marker-shadow.png',
  });
  var crs = new L.Proj.CRS("EPSG:2192",
          "+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=2.337229166666667 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs",
          {
              //origin: [1712,-2291],
              resolutions: [512, 256, 128, 64, 32, 8, 4, 2, 1, 0.5, 0.25, 0.125] //  example zoom level resolutions
          });
  var map = L.map('mapid', {
      crs: crs,
      maxBounds: new L.LatLngBounds([[27.20, -3.57],[26.25, -2.25]]),
      minZoom: 1,
      maxZoom: 11
    }).setView(L.latLng(26.70625, -2.87625), 1, crs);

  var wmsLayer = L.tileLayer.wms("http://localhost:8080/geoserver/Kbase42222/wms", {
      layers: 'Kbase42222:infra281',
      crs: crs,
      format: 'image/png',
      transparent: true,
      version: '1.1.0'
  });
  map.addLayer(wmsLayer);

  L.Control.Geocoder.callbackId = 0;
  L.Control.Geocoder.jsonp = function (url, params, callback, context, jsonpParam) {
      var callbackId = '_l_geocoder_' + (L.Control.Geocoder.callbackId++);
      params[jsonpParam || 'callback'] = callbackId;
      window[callbackId] = L.Util.bind(callback, context);
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = url + L.Util.getParamString(params);
      script.id = callbackId;
      document.getElementsByTagName('head')[0].appendChild(script);
  };
  L.Control.Geocoder.getJSON = function (url, params, callback) {
      var xmlHttp = new XMLHttpRequest();
      xmlHttp.open("GET", url + L.Util.getParamString(params), true);
      xmlHttp.send(null);
      xmlHttp.onreadystatechange = function () {
          if (xmlHttp.readyState != 4)
        return;
          if (xmlHttp.status != 200 && req.status != 304)
        return;
          callback(JSON.parse(xmlHttp.response));
      };
  };

  L.Control.Geocoder.Nominatim.include({
      geocode: function (query, cb, context) {
          L.Control.Geocoder.jsonp(this.options.serviceUrl + 'search_station/', L.extend({
              q: query,
              limit: 10,
              format: 'json',
              addressdetails: 1
          }, this.options.geocodingQueryParams),
                  function (data) {
                      var results = [];
                      for (var i = data.length - 1; i >= 0; i--) {
                          var lat = data[i].lat, lon = data[i].lon,
                                  npt = L.point(lat, lon),
                                  center = crs.unproject(npt),
                                  bounds = center.toBounds(50);
                          //    bbox = L.LatLngBounds(center,center);
                          //for (var j = 0; j < 4; j++) bbox[j] = parseFloat(bbox[j]);
                          results[i] = {
                              icon: "http:\/\/nominatim.openstreetmap.org\/images\/mapicons\/poi_place_city.p.20.png",
                              name: data[i].display_name,
                              html: this.options.htmlTemplate ?
                                      this.options.htmlTemplate(data[i])
                                      : undefined,
                              bbox: bounds,
                              center: center,
                              properties: "tst"
                          };
                      }
                      cb.call(context, results);
                  }, this, 'json_callback');
      },
      reverse: function (location, scale, cb, context) {
          var lpt = L.latLng(location.lat, location.lng)
              pt = crs.project(lpt)
          L.Control.Geocoder.jsonp(this.options.serviceUrl + 'reverse/', L.extend({
              lat: pt.x,
              lon: pt.y,
              zoom: Math.round(Math.log(scale / 256) / Math.log(2)),
              addressdetails: 1,
              format: 'json'
          }, this.options.reverseQueryParams), function (data) {
              var result = [],
                      npt, center;
              if (data && data.lat && data.lon) {
                  npt = L.point(data.lat, data.lon);
                  center = crs.unproject(npt);
                  result.push({
                      name: data.display_name,
                      html: this.options.htmlTemplate ?
                              this.options.htmlTemplate(data)
                              : undefined,
                      center: center,
                      bounds: center.toBounds(50),
                      properties: undefined
                  });
              }
              cb.call(context, result);
          }, this, 'json_callback');
      }
  });

  var mygc = new L.Control.Geocoder.nominatim({
      serviceUrl: 'http://localhost:3000/geocoder/',
      htmlTemplate: function (r) {
      }
  });

   var geocoder = new L.Control.Geocoder(
          {
           geocoder: mygc,
           collapsed: false
          }),
          marker;
  var geo = geocoder.addTo(map);

  geocoder.addTo(map);

</script>